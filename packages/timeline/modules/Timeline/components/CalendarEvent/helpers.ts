/**
 * Take two dates as parameter and return the number of days between them
 *
 * @param startDate when the event starts
 * @param endDate when the event ent ends
 * @returns number of days between the two dates
 */
export const getDaysBetweenDates = (startDate: Date, endDate: Date) => {
  const diffTime = Math.abs(endDate.getTime() - startDate.getTime());
  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
  return diffDays;
};

const frames = {
  small: [
    "M14 2.99996C20.42 4.25996 27.52 3.37996 44 2.99996M14 2.99996C23.6 4.39996 35.28 4.03996 44 2.99996M44 2.99996C53.22 0.859958 58.62 3.25996 55 14M44 2.99996C51.44 6.39996 54.9 6.73996 55 14M55 14C54.22 20.42 53.84 26.74 55 36.02M55 14C55.36 20.92 55.82 27.64 55 36.02M55 36.02C55.1 43.7 52.26 50.04 44 47.04M55 36.02C53.68 40.52 49.5 48.26 44 47.04M44 47.04C32.06 45.58 21.36 45.3 14 47.04M44 47.04C36.06 47.46 24.62 48.64 14 47.04M14 47.04C5.16 46.04 4.72 43.9 3 36.02M14 47.04C10.16 44.12 1.68 40.02 3 36.02M3 36.02C1.82 32.9 1.42 26.84 3 14M3 36.02C3.2 27.26 3.36 18.14 3 14M3 14C4.72 6.05996 6.14 6.77996 14 2.99996M3 14C1.82 4.95996 7.22 4.15996 14 2.99996",
    "M13.0046 2.02517C19.2846 2.10517 28.8246 2.66517 43.0046 2.02517M13.0046 2.02517C20.3046 2.58517 26.9246 0.985174 43.0046 2.02517M43.0046 2.02517C53.9646 -1.39483 54.0846 8.66517 54.0046 13.0252M43.0046 2.02517C50.2446 2.08517 53.2646 7.18517 54.0046 13.0252M54.0046 13.0252C52.6846 21.1252 53.7646 27.3852 54.0046 35.0452M54.0046 13.0252C55.0646 22.1652 54.1246 29.9052 54.0046 35.0452M54.0046 35.0452C54.9246 45.3852 49.1846 43.5852 43.0046 46.0652M54.0046 35.0452C52.1646 43.6052 54.5846 47.4052 43.0046 46.0652M43.0046 46.0652C36.0246 44.3052 27.3046 45.9252 13.0046 46.0652M43.0046 46.0652C31.6246 47.6052 22.2246 45.7652 13.0046 46.0652M13.0046 46.0652C7.38456 46.5852 5.04456 39.8452 2.00456 35.0452M13.0046 46.0652C4.34456 42.7252 -1.25544 39.0652 2.00456 35.0452M2.00456 35.0452C0.404557 30.6452 4.24456 23.6852 2.00456 13.0252M2.00456 35.0452C2.26456 27.0852 2.44456 19.9052 2.00456 13.0252M2.00456 13.0252C1.48456 9.48517 4.64456 0.545174 13.0046 2.02517M2.00456 13.0252C2.54456 6.84517 10.1046 0.945174 13.0046 2.02517",
    "M13.9347 1.97975C25.3347 2.69975 31.7347 0.559751 43.9347 1.97975M13.9347 1.97975C25.9547 1.01975 37.9347 0.53975 43.9347 1.97975M43.9347 1.97975C51.3547 4.93975 54.8547 5.69975 54.9347 12.9798M43.9347 1.97975C50.5347 3.45975 57.5947 3.87975 54.9347 12.9798M54.9347 12.9798C54.6547 18.3398 56.5947 27.4998 54.9347 34.9998M54.9347 12.9798C55.1547 20.6198 55.3747 28.8798 54.9347 34.9998M54.9347 34.9998C53.7947 39.8598 49.6747 47.0798 43.9347 46.0198M54.9347 34.9998C59.1947 43.6998 49.5547 45.7598 43.9347 46.0198M43.9347 46.0198C36.3347 45.8398 29.7347 48.0798 13.9347 46.0198M43.9347 46.0198C33.7347 45.9398 25.3147 46.5198 13.9347 46.0198M13.9347 46.0198C9.63469 43.4798 1.77469 39.4398 2.93469 34.9998M13.9347 46.0198C3.33469 42.6798 0.194687 39.5398 2.93469 34.9998M2.93469 34.9998C5.21469 25.6998 3.99469 18.2198 2.93469 12.9798M2.93469 34.9998C3.35469 28.3398 2.73469 23.0598 2.93469 12.9798M2.93469 12.9798C1.91469 4.15975 7.07469 2.97975 13.9347 1.97975M2.93469 12.9798C7.35469 4.57975 2.71469 5.27975 13.9347 1.97975",
    "M13.9661 4.55628C20.7861 3.07628 34.6861 5.85628 43.9661 4.55628M13.9661 4.55628C25.9261 3.43628 35.2061 5.83628 43.9661 4.55628M43.9661 4.55628C51.2061 4.61628 54.3261 9.51628 54.9661 15.5563M43.9661 4.55628C53.9461 2.79628 55.2861 5.63628 54.9661 15.5563M54.9661 15.5563C56.7461 23.3963 55.8861 31.1363 54.9661 37.5763M54.9661 15.5563C55.2261 24.4763 54.6661 31.0563 54.9661 37.5763M54.9661 37.5763C53.3661 45.9763 55.0061 49.7563 43.9661 48.5963M54.9661 37.5763C53.2461 44.6763 49.2461 49.9563 43.9661 48.5963M43.9661 48.5963C37.7061 50.8163 29.8661 46.0563 13.9661 48.5963M43.9661 48.5963C32.6261 48.7163 21.1661 47.5763 13.9661 48.5963M13.9661 48.5963C5.48611 45.6763 0.126105 42.0363 2.9661 37.5763M13.9661 48.5963C3.90611 45.7763 6.9661 41.2963 2.9661 37.5763M2.9661 37.5763C3.6461 30.3363 2.6461 23.1563 2.9661 15.5563M2.9661 37.5763C2.7261 32.9563 2.5861 25.8563 2.9661 15.5563M2.9661 15.5563C3.4461 9.23628 10.4861 3.61628 13.9661 4.55628M2.9661 15.5563C-0.913895 11.5163 4.24611 5.65628 13.9661 4.55628",
    "M13.9573 3.63866C26.0173 5.15866 35.0373 5.17866 43.9573 3.63866M13.9573 3.63866C21.3973 4.99866 28.7173 3.91866 43.9573 3.63866M43.9573 3.63866C50.6373 4.91866 57.2773 5.77866 54.9573 14.6387M43.9573 3.63866C51.6173 1.05866 55.4373 6.95866 54.9573 14.6387M54.9573 14.6387C56.0773 21.7587 56.6173 25.0987 54.9573 36.6587M54.9573 14.6387C54.6973 20.7387 54.5773 28.4987 54.9573 36.6587M54.9573 36.6587C58.6573 45.1787 49.7973 47.4587 43.9573 47.6787M54.9573 36.6587C52.8973 45.3787 48.7973 47.7587 43.9573 47.6787M43.9573 47.6787C35.5973 45.3787 28.9573 46.7787 13.9573 47.6787M43.9573 47.6787C36.8373 46.7587 27.0173 46.6187 13.9573 47.6787M13.9573 47.6787C3.79729 44.7787 0.577293 41.5587 2.95729 36.6587M13.9573 47.6787C10.6373 44.0587 4.81729 48.3987 2.95729 36.6587M2.95729 36.6587C2.75729 31.4187 1.91729 25.9587 2.95729 14.6387M2.95729 36.6587C2.69729 29.9787 3.11729 24.3987 2.95729 14.6387M2.95729 14.6387C6.81729 6.37866 3.25729 6.49866 13.9573 3.63866M2.95729 14.6387C0.577293 8.39866 4.93729 -0.661341 13.9573 3.63866",
  ],
  medium: [
    "M15.1386 5.59771C464.239 4.49771 915.038 4.91771 1150.46 5.59771M15.1386 5.59771C278.579 7.91771 540.918 7.21771 1150.46 5.59771M1150.46 5.59771C1163.92 5.43771 1166.26 10.6577 1161.46 16.5977M1150.46 5.59771C1163.62 1.69771 1165.16 14.5577 1161.46 16.5977M1161.46 16.5977C1160.56 19.7777 1165.18 32.2977 1161.46 38.6177M1161.46 16.5977C1160.6 22.4977 1162.78 24.6377 1161.46 38.6177M1161.46 38.6177C1162.62 49.8777 1158.52 51.7977 1150.46 49.6377M1161.46 38.6177C1161.06 47.6177 1160.04 41.6977 1150.46 49.6377M1150.46 49.6377C881.418 53.0577 614.639 53.4777 15.1386 49.6377M1150.46 49.6377C852.458 42.6777 558.059 42.5177 15.1386 49.6377M15.1386 49.6377C1.29856 55.6777 7.67856 49.7377 4.13856 38.6177M15.1386 49.6377C16.9586 50.3777 -2.16144 46.2777 4.13856 38.6177M4.13856 38.6177C2.83856 26.7377 5.59856 23.8377 4.13856 16.5977M4.13856 38.6177C6.51856 31.8777 6.55856 29.1577 4.13856 16.5977M4.13856 16.5977C-2.52144 9.41771 9.01856 7.99771 15.1386 5.59771M4.13856 16.5977C8.39856 10.0177 3.59856 8.81771 15.1386 5.59771",
    "M15.1386 7.40864C267.719 -2.73136 517.158 2.28864 1150.46 7.40864M15.1386 7.40864C434.499 1.26864 852.098 1.04864 1150.46 7.40864M1150.46 7.40864C1157.76 1.76864 1156.36 6.20864 1161.46 18.4086M1150.46 7.40864C1157.14 13.7086 1165.36 18.1886 1161.46 18.4086M1161.46 18.4086C1158.24 24.1086 1158.76 32.8486 1161.46 40.4286M1161.46 18.4086C1160.32 23.5286 1161.1 30.6086 1161.46 40.4286M1161.46 40.4286C1157.84 53.8486 1160.12 46.5086 1150.46 51.4486M1161.46 40.4286C1160.84 44.2086 1164.58 51.5486 1150.46 51.4486M1150.46 51.4486C746.478 52.2486 343.299 48.9086 15.1386 51.4486M1150.46 51.4486C769.718 49.3886 390.059 48.6886 15.1386 51.4486M15.1386 51.4486C11.7786 53.6486 8.57856 49.2686 4.13856 40.4286M15.1386 51.4486C-0.841444 49.3086 11.5386 43.6686 4.13856 40.4286M4.13856 40.4286C1.05856 37.0686 -0.421444 30.1686 4.13856 18.4086M4.13856 40.4286C5.65856 34.9286 2.41856 28.6886 4.13856 18.4086M4.13856 18.4086C9.01856 13.5086 1.47856 3.28864 15.1386 7.40864M4.13856 18.4086C10.0786 2.38864 0.818556 12.1486 15.1386 7.40864",
    "M16.1385 8.18623C327.799 15.3862 642.039 10.3262 1151.46 8.18623M16.1385 8.18623C393.759 8.76623 770.419 10.5462 1151.46 8.18623M1151.46 8.18623C1163.8 1.10623 1169.78 16.7262 1162.46 19.1862M1151.46 8.18623C1161.58 0.906228 1157.72 17.7862 1162.46 19.1862M1162.46 19.1862C1166.16 20.5462 1162.94 26.7262 1162.46 41.2062M1162.46 19.1862C1160.32 25.2062 1162.92 29.1462 1162.46 41.2062M1162.46 41.2062C1157.32 47.9062 1160.92 58.2862 1151.46 52.2262M1162.46 41.2062C1159.84 43.0462 1162.14 44.0862 1151.46 52.2262M1151.46 52.2262C835.579 46.0062 518.619 49.7262 16.1385 52.2262M1151.46 52.2262C732.519 46.4862 312.139 47.1662 16.1385 52.2262M16.1385 52.2262C15.8585 58.4062 1.25854 47.7262 5.13854 41.2062M16.1385 52.2262C16.0185 46.4662 8.03854 57.7262 5.13854 41.2062M5.13854 41.2062C4.73854 32.5662 3.69854 26.6862 5.13854 19.1862M5.13854 41.2062C5.81854 31.2262 3.77854 24.9462 5.13854 19.1862M5.13854 19.1862C8.63854 15.4662 9.77854 8.86623 16.1385 8.18623M5.13854 19.1862C6.89854 6.88623 11.0385 7.28623 16.1385 8.18623",
    "M18.1385 5.91854C335.459 15.3585 647.659 11.4585 1153.46 5.91854M18.1385 5.91854C419.139 5.87854 821.999 3.69854 1153.46 5.91854M1153.46 5.91854C1159.98 12.1985 1159.46 12.1185 1164.46 16.9185M1153.46 5.91854C1169.96 2.63854 1156.68 2.31854 1164.46 16.9185M1164.46 16.9185C1161.3 25.8385 1165.64 27.8385 1164.46 38.9385M1164.46 16.9185C1163.68 25.3185 1165.04 32.0585 1164.46 38.9385M1164.46 38.9385C1165.14 47.8185 1156.48 51.8985 1153.46 49.9585M1164.46 38.9385C1163.56 53.4385 1163.84 51.8785 1153.46 49.9585M1153.46 49.9585C786.439 55.9585 412.079 57.3585 18.1385 49.9585M1153.46 49.9585C839.259 55.9385 523.559 54.7785 18.1385 49.9585M18.1385 49.9585C6.53853 50.1185 -0.141466 41.8585 7.13853 38.9385M18.1385 49.9585C6.61853 56.4185 0.518534 38.5985 7.13853 38.9385M7.13853 38.9385C6.01853 34.1785 7.85853 27.8785 7.13853 16.9185M7.13853 38.9385C8.33853 32.9785 6.53853 24.7185 7.13853 16.9185M7.13853 16.9185C1.39853 15.7385 9.07853 11.0585 18.1385 5.91854M7.13853 16.9185C13.7985 3.55854 2.39853 7.99854 18.1385 5.91854",
    "M16.1385 6.62802C448.779 4.04802 888.238 1.44802 1151.46 6.62802M16.1385 6.62802C389.039 0.668025 763.758 -1.41198 1151.46 6.62802M1151.46 6.62802C1151.48 8.44802 1166.02 6.60802 1162.46 17.628M1151.46 6.62802C1158.52 1.46802 1157.16 19.468 1162.46 17.628M1162.46 17.628C1161.52 28.488 1165.82 33.988 1162.46 39.648M1162.46 17.628C1163.2 28.088 1163.6 34.488 1162.46 39.648M1162.46 39.648C1161.88 46.608 1150.98 57.708 1151.46 50.668M1162.46 39.648C1165.54 46.648 1160.16 52.788 1151.46 50.668M1151.46 50.668C883.898 56.168 616.679 55.048 16.1385 50.668M1151.46 50.668C745.918 43.208 338.019 42.668 16.1385 50.668M16.1385 50.668C9.39855 53.048 2.21855 41.588 5.13855 39.648M16.1385 50.668C11.5385 57.308 4.07855 51.568 5.13855 39.648M5.13855 39.648C3.63855 35.048 7.95855 30.708 5.13855 17.628M5.13855 39.648C5.25855 33.628 7.57855 30.288 5.13855 17.628M5.13855 17.628C12.3185 7.38803 8.19855 2.28802 16.1385 6.62802M5.13855 17.628C12.3785 5.94802 7.31855 4.92802 16.1385 6.62802",
  ],
  large: [
    "M15.9393 7.98161C858.919 10.1216 1700.48 9.34161 2225.88 7.98161M15.9393 7.98161C569.359 6.50161 1123.32 8.46161 2225.88 7.98161M2225.88 7.98161C2231.36 8.86161 2234.2 9.02161 2236.9 18.9816M2225.88 7.98161C2231.12 6.04161 2244.6 12.3616 2236.9 18.9816M2236.9 18.9816C2237.66 31.5216 2235.8 39.9216 2236.9 41.0016M2236.9 18.9816C2238.3 28.2016 2238.76 36.0616 2236.9 41.0016M2236.9 41.0016C2231.72 44.5816 2238.48 55.4616 2225.88 52.0216M2236.9 41.0016C2238.06 39.2416 2224.24 50.0216 2225.88 52.0216M2225.88 52.0216C1653.7 52.1216 1086.24 53.7416 15.9393 52.0216M2225.88 52.0216C1445.4 63.8016 662.599 63.3816 15.9393 52.0216M15.9393 52.0216C0.739259 56.5016 2.75926 40.6416 4.93926 41.0016M15.9393 52.0216C17.6193 55.3816 -3.28074 51.9816 4.93926 41.0016M4.93926 41.0016C3.35926 37.6416 5.69926 33.0416 4.93926 18.9816M4.93926 41.0016C3.51926 34.4016 4.57926 28.4216 4.93926 18.9816M4.93926 18.9816C10.1593 17.0816 11.1993 4.52161 15.9393 7.98161M4.93926 18.9816C0.519258 5.62161 10.5393 4.54161 15.9393 7.98161",
    "M15.0396 10.6413C677.6 21.3213 1342.08 24.7413 2224.98 10.6413M15.0396 10.6413C491.48 -0.158678 967.62 -2.75868 2224.98 10.6413M2224.98 10.6413C2238.46 12.3413 2238.7 21.1213 2236 21.6413M2224.98 10.6413C2238.86 17.1013 2234.34 16.2413 2236 21.6413M2236 21.6413C2239.88 30.8813 2236.52 38.8013 2236 43.6613M2236 21.6413C2236.4 27.3613 2237.08 32.3813 2236 43.6613M2236 43.6613C2235.2 44.9613 2233.62 52.4213 2224.98 54.6813M2236 43.6613C2241.4 46.2413 2236.96 58.5613 2224.98 54.6813M2224.98 54.6813C1592.5 37.2613 957 38.9813 15.0396 54.6813M2224.98 54.6813C1741.24 51.4813 1259.5 51.9013 15.0396 54.6813M15.0396 54.6813C12.3796 50.6013 2.75957 54.3213 4.03957 43.6613M15.0396 54.6813C12.7196 58.2813 3.53957 57.6613 4.03957 43.6613M4.03957 43.6613C6.49957 39.8413 3.71957 27.2813 4.03957 21.6413M4.03957 43.6613C3.27957 37.7813 4.65957 30.6413 4.03957 21.6413M4.03957 21.6413C-0.120432 9.58132 2.77957 4.62132 15.0396 10.6413M4.03957 21.6413C11.2796 16.6413 11.2796 11.5813 15.0396 10.6413",
    "M14.0777 4.72834C731.818 23.3683 1445.96 19.2683 2224.02 4.72834M14.0777 4.72834C600.878 7.44834 1186 6.60834 2224.02 4.72834M2224.02 4.72834C2227.82 6.70834 2240.52 8.66834 2235.04 15.7283M2224.02 4.72834C2237.22 13.8083 2226.16 16.6483 2235.04 15.7283M2235.04 15.7283C2238.34 20.2483 2231.68 23.8483 2235.04 37.7483M2235.04 15.7283C2235.66 21.3283 2234.04 29.0683 2235.04 37.7483M2235.04 37.7483C2241.92 44.2683 2224.18 41.8083 2224.02 48.7683M2235.04 37.7483C2234.26 53.5483 2239.62 54.1483 2224.02 48.7683M2224.02 48.7683C1438.12 37.6083 653.398 33.6083 14.0777 48.7683M2224.02 48.7683C1708 30.6483 1193.66 33.5483 14.0777 48.7683M14.0777 48.7683C3.05771 53.1483 -1.46229 42.9483 3.07771 37.7483M14.0777 48.7683C9.55771 55.2483 9.75771 38.8683 3.07771 37.7483M3.07771 37.7483C6.95771 30.8283 5.29771 32.1483 3.07771 15.7283M3.07771 37.7483C2.43771 33.7483 5.07771 29.0083 3.07771 15.7283M3.07771 15.7283C8.23771 9.66834 14.3577 -2.61166 14.0777 4.72834M3.07771 15.7283C5.85771 7.20833 -0.322285 3.90834 14.0777 4.72834",
    "M13.4262 7.26382C893.426 -0.416182 1775.63 0.523818 2223.37 7.26382M13.4262 7.26382C634.946 12.5638 1256.17 12.6038 2223.37 7.26382M2223.37 7.26382C2229.75 5.28382 2236.33 14.3838 2234.39 18.2638M2223.37 7.26382C2230.23 3.12382 2230.37 10.5438 2234.39 18.2638M2234.39 18.2638C2235.79 24.8038 2233.01 35.1438 2234.39 40.2838M2234.39 18.2638C2233.65 25.4638 2233.35 33.3238 2234.39 40.2838M2234.39 40.2838C2230.71 51.5038 2234.25 49.4638 2223.37 51.3038M2234.39 40.2838C2236.89 45.0238 2229.47 52.7038 2223.37 51.3038M2223.37 51.3038C1403.29 45.3638 587.466 46.7238 13.4262 51.3038M2223.37 51.3038C1668.65 58.5438 1114.97 58.8038 13.4262 51.3038M13.4262 51.3038C7.3862 54.3238 3.6462 50.2038 2.4262 40.2838M13.4262 51.3038C6.8262 55.6838 -1.7938 49.0238 2.4262 40.2838M2.4262 40.2838C0.786197 34.3838 1.4862 28.2438 2.4262 18.2638M2.4262 40.2838C1.6262 32.4038 1.5062 25.2638 2.4262 18.2638M2.4262 18.2638C6.3462 7.34382 8.1662 9.82382 13.4262 7.26382M2.4262 18.2638C1.4462 7.90382 8.4662 6.36382 13.4262 7.26382",
    "M19 12.0677C774.18 -0.112266 1527.76 -3.23227 2228.94 12.0677M19 12.0677C737.8 13.0277 1453 12.8877 2228.94 12.0677M2228.94 12.0677C2231.66 13.2877 2241.8 21.6277 2239.96 23.0677M2228.94 12.0677C2234.56 4.92773 2234.6 13.7277 2239.96 23.0677M2239.96 23.0677C2238.54 27.9677 2241.72 41.0077 2239.96 45.0877M2239.96 23.0677C2239.36 31.4677 2241.54 37.1277 2239.96 45.0877M2239.96 45.0877C2244.38 44.8477 2230.62 54.7277 2228.94 56.1077M2239.96 45.0877C2243.88 52.6477 2228.74 49.9877 2228.94 56.1077M2228.94 56.1077C1633.42 58.5677 1046.6 53.9877 19 56.1077M2228.94 56.1077C1445.66 52.4877 662.54 50.2877 19 56.1077M19 56.1077C4.97997 56.3677 15.96 59.5077 7.99997 45.0877M19 56.1077C7.13997 60.7877 16.18 44.5477 7.99997 45.0877M7.99997 45.0877C9.59997 43.4877 9.51997 38.0877 7.99997 23.0677M7.99997 45.0877C8.23997 37.8477 5.87997 30.9877 7.99997 23.0677M7.99997 23.0677C1.43997 17.2077 7.59997 14.2077 19 12.0677M7.99997 23.0677C11.9 9.56774 12.88 4.08773 19 12.0677",
  ],
};

const backgrounds = {
  small: [
    "M11.78 2.72001L46.88 5.70001L55.4 6.30001L56.94 15.58L50.5 40.74L42.72 49.26L11.66 49.36L2.64001 42.84L4.96001 35.12L5.70001 7.66001L11.78 0.640015",
    "M15.9046 4.72515L46.1446 2.56515L53.1846 6.34515L52.2646 9.48515L49.9846 45.5252L40.6446 48.3852L9.90457 44.6251L6.72457 42.3852L4.00457 33.5252L0.464569 5.84515L10.6846 1.90515",
    "M17.0947 2.51974L45.8547 3.55974L50.4347 1.17974L53.6747 15.2197L49.8347 45.5797L40.8147 44.5797L15.9147 45.0997L7.69469 41.7397L0.714691 32.6397L1.27469 8.05974L11.6147 0.859741",
    "M15.9061 6.13634L42.2061 0.996338L50.9461 9.53634L52.6261 17.8963L49.1061 44.3963L45.9261 47.6763L15.9861 47.0563L3.4861 43.4763L0.626099 37.4563L1.3261 9.63634L15.4261 3.25634",
    "M12.2173 0.0786133L42.6773 5.85861L49.8573 8.71861L51.8573 13.1986L54.1773 43.9986L45.9573 46.1386L11.7373 45.3186L3.3773 44.7986L0.637299 35.5586L5.0973 8.51861L14.2373 5.37861",
  ],
  medium: [
    "M22.5186 3.87774L1145.42 10.7577L1155.78 13.9177L1154.72 33.4177L1157.44 48.3777L1154.14 46.9777L22.8386 51.8377L0.358551 39.5177L3.21855 44.6577L2.59855 16.2777L17.2386 0.437744",
    "M14.7585 8.62871L1158.14 4.12871L1157.04 17.2287L1167.16 32.6487L1159.8 52.6887L1142.74 51.2287L9.03855 47.0287L8.15855 55.3287L2.63855 47.9487L3.27855 17.5687L17.8586 0.428711",
    "M13.0386 14.0863L1151.54 12.6863L1154.2 13.2263L1163.4 46.5063L1163.58 46.4263L1154.22 59.9063L14.5586 48.2863L6.67855 46.9263L0.358551 45.1863L8.01855 18.8063L17.6386 0.66626",
    "M25.4785 0.138428L1154.94 3.15843L1156.98 11.0784L1168.6 31.3784L1166.32 49.0784L1155.18 44.8184L17.4985 52.0784L15.9385 44.9184L2.35854 41.8584L0.758545 10.3184L24.1985 1.31843",
    "M16.6785 4.86804L1151.38 10.948L1168.82 18.268L1169 39.288L1155.44 48.088L1144.16 46.248L12.4985 56.288L2.13853 41.228L7.87853 40.628L0.778534 10.888L20.8785 8.02804",
  ],
  large: [
    "M11.0593 10.7816L2233.7 0.401611L2242.04 7.24161L2237.34 45.9216L2238.38 45.8416L2233.32 52.7816L18.5393 53.6416L0.599274 47.6416L5.81927 45.7616L2.33927 14.6416L18.8193 2.78161",
    "M9.09956 6.16138L2232.56 2.66138L2238.24 21.9414L2238.88 48.9814L2231.3 59.2214L2226.12 58.2214L12.0796 56.7414L4.11956 44.1614L10.3396 42.1614L0.0795593 14.8814L12.2396 17.401",
    "M21.2777 2.60835L2219.86 0.30835L2230.72 7.44835L2230.4 39.3283L2226.82 46.3083L2226.96 43.8283L10.9377 41.7283L13.6177 43.8884L5.57773 40.1483L6.81773 6.76835L12.7777 9.08835",
    "M11.3662 6.60376L2225.55 8.24376L2235.07 9.74376L2235.73 43.1238L2229.87 46.2438L2221.97 52.9638L12.8062 54.4438L5.02619 50.6638L0.12619 38.5238L4.10619 16.2038L13.5662 9.80376",
    "M13.56 12.3477L2231.88 7.12769L2236.12 11.2277L2247.74 42.9677L2239.7 55.7477L2232 51.9477L17.7 60.4677L12.7 56.1277L0.579987 47.7877L14.34 14.7277L14.4 9.26769",
  ],
};

/**
 * Function that takes svg paths from figma to create event
 * retangular frame.
 * @returns a svg path drawing the event frame
 */
export function getRandomEventFrame(size: "small" | "medium" | "large") {
  return frames[size][Math.floor(Math.random() * frames[size].length)];
}

/**
 * Function that takes svg paths from figma to create event
 * background category.
 * @returns a svg path drawing the event background
 */
export function getRandomEventBackground(size: "small" | "medium" | "large") {
  return backgrounds[size][
    Math.floor(Math.random() * backgrounds[size].length)
  ];
}

/**
 * Function that returns a size for the event frame.
 *
 * @param sizeInDays number os days that the event will last
 * @returns objetc with the size of the event frame, test id and svg's viewbox
 */
export function handleSize(sizeInDays: number): {
  size: "small" | "medium" | "large";
  dataTestId: string;
  viewBox: string;
} {
  let size: "small" | "medium" | "large" = "large";

  if (sizeInDays < 3) size = "small";
  else if (sizeInDays < 16) size = "medium";

  const svgMap = {
    small: {
      viewBox: "0 0 61 53",
      dataTestId: "small-frame",
      size: "small" as "small",
    },
    medium: {
      viewBox: "0 0 1165 54",
      dataTestId: "medium-frame",
      size: "medium" as "medium",
    },
    large: {
      viewBox: "0 0 2248 61",
      dataTestId: "large-frame",
      size: "large" as "large",
    },
  };

  return svgMap[size];
}

/**
 * Function that takes a delay in miliseconds and returns only runs
 * the function after the delay.
 *
 * @param func function to be debounced
 * @param waitFor delay in ms
 * @returns debounced function
 */
export function debounce<F extends (...args: Parameters<F>) => ReturnType<F>>(
  func: F,
  waitFor: number
): (...args: Parameters<F>) => void {
  let timeout: NodeJS.Timeout;
  return (...args: Parameters<F>): void => {
    clearTimeout(timeout);
    timeout = setTimeout(() => func(...args), waitFor);
  };
}

/**
 * Check if the current event will overlap with the previous one.
 *
 * @param startDate the start date of the event
 * @param endDate the end date of the last event
 * @returns if the events will overlap
 */
export function willDatesOverlap(startDate: Date, endDate: Date) {
  return endDate.getTime() >= startDate.getTime();
}

/**
 * Get a dates array as a parameter and check the
 * number of dates that a date will overlap with the previous ones.
 *
 * @param dates all previous dates
 * @param currentDate current event stard date
 * @returns line that the event will be drawn
 */
export function getOverlappingDates(dates: Date[], currentDate: Date): number {
  let overlappingDates = 0;

  dates.forEach((date) => {
    if (willDatesOverlap(currentDate, date)) overlappingDates++;
  });

  return overlappingDates;
}
